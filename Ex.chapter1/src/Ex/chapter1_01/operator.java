package Ex.chapter1_01;

public class operator {

	public static void main(String[] args) {
		String userinput = "NaN";
		double val = Double.valueOf(userinput);
		Double.isNaN(val); //true return
		
		
		
		
		
		
		
		
		
		
		
		
		
		// TODO Auto-generated method stub

//		증감 연산자	++, --	1순위
//	    x++	먼저 해당 연산을 수행한 후 피연산자의 값을 1증가 시킴
//		++x	먼저 피연산자의 값을 1증가 시킨 후 해당 연산을 수행함
//		x--	먼저 해당 연산을 수행한 후 피연산자의 값을 1감소 시킴
//		--x	먼저 피연산자의 값을 1감소 시킨 후 해당 연산을 수행함

//		산술 연산자	+, -, *, /, %	2순위
		
//		시프트 연산자	>>, <<, >>>	3순위
//		>>	bit값을 오른쪽으로 이동 (빈 자리는 부호값으로 대입) 한다.
//		<<	bit값을 왼쪽으로 이동 (빈 자리는 0으로 대입) 한다.
//		>>>	bit값을 오른쪽으로 이동 (빈 자리는 0으로 대입) 한다.
		
//		비교 연산자	>, <. >=, <=, ==, !=	4순위	
//		>	크다
//		<	작다
//		>=	크거나 같다
//		<=	작거나 같다
//		==	피연산자들의 값이 같다
//		!=	피연산자들의 값이 같지 않다 
		
//		비트 연산자	&, |, ^, ~	~만 1순위, 나머지는 5순위
//		&	비트 단위의 AND
//		|	비트 단위의 OR
//		^	XOR (배타적 OR)
//		~	단항 연산자 이며, 비트를 반전한다. 0은 1로 1은 0으로 만듬
		
//		논리 연산자	&& , ||, !	!만 1순위, 나머지는 6순위
//		&&	선조건이 true일 때만 후조건을 실행하며 선조건이 false이면 후조건을 실행하지 않는다.
//		||	선조건이 true이면 후조건을 실행하지 않으며 선조건이 false일 때만 후조건을 실행한
		
//		조건(삼항) 연산자	?, :	7순위
		
//		대입 연산자	=, *=, /=, %=, +=, -=	8순위
		
//		조건 연산자	? :	제어문의 단일 비교문과 유사하다.	조건식 ? 참값 : 거짓값





	}

}
